import os
import random
from warnings import catch_warnings
import tgcrypto
import unicodedata
from pyrogram import Client, filters, types
from pyrogram.types import KeyboardButton
import pyqrcode as pq
import telegramcalendar
from classic_utils import *
from mail import *
from mysql_utils import *
from telegramcalendar import *

from config import api_id, api_hash, bot_token
# bot_token = "5761358088:AAGoBiwLt69qRkI439sKdfCz__tCS3jRLNk" test


app = Client("21passbot", api_id=api_id,
             api_hash=api_hash, bot_token=bot_token)

START_CMD = "/start"

HELLO_TXT = "–ü—Ä–∏–≤–µ—Ç, —è - –±–æ—Ç –®–∫–æ–ª—ã 21 –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≥–æ—Å—Ç–µ–π –≤ —à–∫–æ–ª—É. –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞–ø–∏—à–∏ —Å–≤–æ—é —à–∫–æ–ª—å–Ω—É—é –ø–æ—á—Ç—É (" \
            "@student.21-school.ru - –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, @21-school.ru - –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞) "

STUD_MAIL_ADDRESS = "@student.21-school.ru"
SCH_MAIL_ADDRESS = "@21-school.ru"


CREATE_PASS_BUTTON = "‚úÖ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–ø—É—Å–∫"
VIEW_MY_PASS_BUTTON = "üìÑ –ú–æ–∏ –ø—Ä–æ–ø—É—Å–∫–∏"
GET_ADM = "/ADM"
MAIN_MENU_BTN = "üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –ì–ª–∞–≤–Ω—É—é"

ADM_MM = "‚≠êÔ∏è ADM"

NAME_MSG = "–í–≤–µ–¥–∏ –§–ò–û –≥–æ—Å—Ç—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!"
DOCS_MSG = "–≠—Ç–æ —Ç–æ—á–Ω–æ —Ä–µ–∞–ª—å–Ω—ã–π —á–µ–ª–æ–≤–µ–∫? :) –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞, —É–¥–æ—Å—Ç–æ–≤–µ—Ä—è—é—â–µ–≥–æ –ª–∏—á–Ω–æ—Å—Ç—å (–ø–∞—Å–ø–æ—Ä—Ç)."
DATE_MSG = "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–º –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å, –∫–æ–≥–¥–∞ —Ç–≤–æ–π –≥–æ—Å—Ç—å –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –ø–æ—Å–µ—Ç–∏—Ç—å —à–∫–æ–ª—É. –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –¥–∞—Ç—É"
TIME_MSG = "–ü–æ—á—Ç–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏! –ü–æ–¥—Å–∫–∞–∂–∏, –≤–æ —Å–∫–æ–ª—å–∫–æ (—Å 10:00 –¥–æ 19:00) –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –ø—Ä–∏–π—Ç–∏ —Ç–≤–æ–π –≥–æ—Å—Ç—å? (—É–∫–∞–∂–∏ —Ç–æ–ª—å–∫–æ " \
           "—á–∞—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä, 15 –±—É–¥–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å 15:00) "
BYE_MSG = (
    "–°—É–ø–µ—Ä—Å–∫–∏! –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –Ω–µ–º–Ω–æ–∂–∫–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å, –ø–æ–∫–∞ –ê–î–ú –µ–≥–æ –æ–¥–æ–±—Ä—è—Ç!"
)

RULE_34 = "–û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª: –ì–æ—Å—Ç–µ–π –º–æ–∂–Ω–æ –ø—Ä–∏–≤–æ–¥–∏—Ç—å —Å 10:00 –¥–æ 19:00 –≤ –±—É–¥–Ω–∏–µ –¥–Ω–∏\n1 —É—á–∞—Å—Ç–Ω–∏–∫ –∑–∞ " \
          "–æ–¥–Ω–æ –ø–æ—Å–µ—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –Ω–µ –±–æ–ª–µ–µ 2 –≥–æ—Å—Ç–µ–π\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–∑–∏—Ç–∞ - –Ω–µ –±–æ–ª–µ–µ 1 —á–∞—Å–∞\n–ù–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ " \
          "¬´–®–∫–æ–ª—ã 21¬ª –∫–∞–∂–¥—ã–π –≥–æ—Å—Ç—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—Å–µ–≥–¥–∞ –≤ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞\n–ù—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —ç—Ç—É –≥—É–≥–ª-—Ñ–æ—Ä–º—É –Ω–µ " \
          "–ø–æ–∑–¥–Ω–µ–µ, —á–µ–º –∑–∞ 1 –¥–µ–Ω—å –¥–æ –≤–∏–∑–∏—Ç–∞ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è (–ø–Ω - –ø—Ç —Å 10:00 –¥–æ 19:00)\n–ù–∞ –≤—Ö–æ–¥–µ –≥–æ—Å—Ç—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ " \
          "–ø—Ä–µ–¥—ä—è–≤–∏—Ç—å –ø–∞—Å–ø–æ—Ä—Ç "

LAST_PASSES_LIST = "üìí–°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–æ–ø—É—Å–∫–æ–≤"
CHECK_NEW_PASS = "üìÑ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞—è–≤–∫—É"
CHECK_PASS = "üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –ø—Ä–æ–ø—É—Å–∫–∞"

ACCEPT_BUTTON = "‚úÖ –ü–†–ò–ù–Ø–¢–¨"
DECLINE_BUTTON = "‚ùå –û–¢–ö–õ–û–ù–ò–¢–¨"

main_menu_button = types.KeyboardButton(MAIN_MENU_BTN)

create_pass_button: KeyboardButton = types.KeyboardButton(CREATE_PASS_BUTTON)
my_passes_button = types.KeyboardButton(VIEW_MY_PASS_BUTTON)

adm_button = types.KeyboardButton(ADM_MM)
view_all = types.KeyboardButton(LAST_PASSES_LIST)
get_one = types.KeyboardButton(CHECK_NEW_PASS)
get_one_byID = types.KeyboardButton(CHECK_PASS)

accept_button = types.InlineKeyboardButton(text=ACCEPT_BUTTON, callback_data="['value', '" + ACCEPT_BUTTON + "', '+']")
decline_button = types.InlineKeyboardButton(text=DECLINE_BUTTON, callback_data="['value', '" + DECLINE_BUTTON + "', '+']")

adm_choice_markup = types.InlineKeyboardMarkup([[accept_button],[decline_button]])

markup = types.ReplyKeyboardMarkup(
    keyboard=[[create_pass_button, my_passes_button]], resize_keyboard=True
)

adm_markup = types.ReplyKeyboardMarkup(
    keyboard=[[adm_button], [create_pass_button, my_passes_button]], resize_keyboard=True
)

adm_panel_markup = types.ReplyKeyboardMarkup(
    keyboard=[[view_all], [get_one], [get_one_byID], [main_menu_button]], resize_keyboard=True
)

main_menu_markup = types.ReplyKeyboardMarkup(
    keyboard=[[main_menu_button]], resize_keyboard=True
)

async def admGetPass():
    cursor = cnx.cursor()
    print_log("Database connection successful!")
    try:
        query = "SELECT * FROM `Passes` WHERE `status` = '0' LIMIT 1"
        cursor.execute(query)
        res = cursor.fetchall()
        if len(res) == 0:
            tmp = "üìÑ –ù–µ—Ç –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫!"
        else:
            for i in res:
                if str(i[6]) == '0':
                    stat = "üîµ –í –û–ë–†–ê–ë–û–¢–ö–ï"
                elif str(i[6]) == '1':
                    stat = "üü¢ –û–î–û–ë–†–ï–ù"
                elif str(i[6]) >= '2':
                    stat = "üî¥ –ù–ï–î–ï–ô–°–¢–í–ò–¢–ï–õ–ï–ù"
                inviter = await getUserState(str(i[1]), 'nickname')
                tmp = (
                    "\n–ü–†–û–ü–£–°–ö ‚Ññ"
                    + str(i[0])
                    + "\n–ê–í–¢–û–†: "
                    + str(inviter)
                    + "\n–ò–ú–Ø –ì–û–°–¢–Ø: "
                    + str(i[2])
                    + "\n–î–û–ö–£–ú–ï–ù–¢: "
                    + str(i[3])
                    + "\n–î–ê–¢–ê: "
                    + str(i[4])
                    + "\n–í–†–ï–ú–Ø: "
                    + str(i[5])
                    + ":00\n–°–¢–ê–¢–£–°: "
                    + stat
                )
        print_log("Passes have selected successful or no passes have found!")
    except Exception as ex:
        print_log("[Error] Passes list select error: ")
        print_log(ex)
    cursor.close()
    return tmp

async def getPassesList(user_id, count):
    cursor = cnx.cursor()
    print_log("Database connection successful!")
    try:
        query = "SELECT * FROM `Passes` ORDER BY `pass_id` DESC LIMIT 25"
        cursor.execute(query)
        res = cursor.fetchall()
        tmp = ""
        if len(res) == 0:
            await simpleMessage(app, user_id, "üìÑ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø—Ä–æ–ø—É—Å–∫–æ–≤!")
        else:
            for i in res:
                inviter_nick = await getUserState(i[1], 'nickname')
                if str(i[6]) == '0':
                    stat = "üîµ "
                elif str(i[6]) == '1':
                    stat = "üü¢ "
                elif str(i[6]) >= '2':
                    stat = "üî¥ "
                tmp = tmp + f"{stat} ‚Ññ{str(i[0])} | {str(i[4])} {str(i[5])}:00 | [{inviter_nick}](tg://user?id={i[1].strip()})\n"
        print_log("Passes have selected successful or no users have found!")
        await simpleMessage(app, user_id, tmp)
    except Exception as ex:
        print_log("[Error] Passes list select error: ")
        print_log(ex)
    cursor.close()

async def getPassByID(pass_id):
    cursor = cnx.cursor()
    print_log("Database connection successful!")
    try:
        query = "SELECT * FROM `Passes` WHERE `pass_id` = " + str(pass_id)
        cursor.execute(query)
        res = cursor.fetchall()
        if len(res) == 0:
            tmp = "üìÑ –ü—Ä–æ–ø—É—Å–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        else:
            for i in res:
                if str(i[6]) == '0':
                    stat = "üîµ –í –û–ë–†–ê–ë–û–¢–ö–ï"
                elif str(i[6]) == '1':
                    stat = "üü¢ –û–î–û–ë–†–ï–ù"
                elif str(i[6]) == '2':
                    stat = "üî¥ –ù–ï–î–ï–ô–°–¢–í–ò–¢–ï–õ–ï–ù"
                tmp = (
                    "\n–ü–†–û–ü–£–°–ö ‚Ññ"
                    + str(i[0])
                    + "\n–ò–ú–Ø: "
                    + str(i[2])
                    + "\n–î–û–ö–£–ú–ï–ù–¢: "
                    + str(i[3])
                    + "\n–î–ê–¢–ê: "
                    + str(i[4])
                    + "\n–í–†–ï–ú–Ø: "
                    + str(i[5])
                    + ":00\n–°–¢–ê–¢–£–°: "
                    + stat
                )
        print_log("Passes have selected successful or no passes have found!")
    except Exception as ex:
        print_log("[Error] Passes list select error: ")
        print_log(ex)
    cursor.close()
    return tmp

async def getMyPasses(user_id):
    cursor = cnx.cursor()
    print_log("Database connection successful!")
    try:
        query = "SELECT * FROM `Passes` WHERE `inviter_id` = " + str(user_id) + " AND `status` < '2'"
        cursor.execute(query)
        res = cursor.fetchall()
        if len(res) == 0:
            await simpleMessage(app, user_id, "üìÑ –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–ø—É—Å–∫–æ–≤!")
        else:
            for i in res:
                if str(i[6]) == '0':
                    stat = "üîµ –í –û–ë–†–ê–ë–û–¢–ö–ï"
                elif str(i[6]) == '1':
                    stat = "üü¢ –û–î–û–ë–†–ï–ù"
                elif str(i[6]) == '2':
                    stat = "üî¥ –ù–ï–î–ï–ô–°–¢–í–ò–¢–ï–õ–ï–ù"
                tmp = (
                    "\n–ü–†–û–ü–£–°–ö ‚Ññ"
                    + str(i[0])
                    + "\n–ò–ú–Ø: "
                    + str(i[2])
                    + "\n–î–û–ö–£–ú–ï–ù–¢: "
                    + str(i[3])
                    + "\n–î–ê–¢–ê: "
                    + str(i[4])
                    + "\n–í–†–ï–ú–Ø: "
                    + str(i[5])
                    + ":00\n–°–¢–ê–¢–£–°: "
                    + stat
                )
                try:
                    value = str(i[0])
                except Exception as _ex:
                    print("[Error] ", _ex)
                res = pq.create(value)
                res.png(f'cache/{value}.png', scale=6)
                with open(f'cache/{value}.png', 'rb') as photo:
                    await app.send_media_group(user_id, [types.InputMediaPhoto(photo, caption=tmp)])
                os.system(f'rm -rf cache/{value}.png')
        print_log("Passes have selected successful or no users have found!")
    except Exception as ex:
        print_log("[Error] Passes list select error: ")
        print_log(ex)
    cursor.close()

async def getUserState(user_id, row):
    state = database_select_user_row(user_id, row)
    return state


@app.on_message(filters.all)
async def message_handler(client, message):
    text = ""
    try:
        text = str(message.text)
        if '\\' in text:
            text = ""
    except:
        text = ""
    # –ó–î–ï–°–¨ –ë–£–î–ï–¢ –ü–†–û–í–ï–†–ö–ê –ù–ê –ù–ê–õ–ò–ß–ò–ï –Æ–ó–ï–†–ê –í –ë–î
    role = int(await getUserState(message.from_user.id, "role"))
    state = int(await getUserState(message.from_user.id, "state"))
    user = User()
    user.user_id = message.from_user.id
    if state == -1:
        if text == START_CMD:
            await simpleMessage(app, message.from_user.id, HELLO_TXT)
            user.campus = -1
            user.full_name = ""
            user.role = 1
            database_add_user(user)
            await setUserState(message.from_user.id, "state", 0)
    elif state == 0:
        if (
            STUD_MAIL_ADDRESS in text
            or SCH_MAIL_ADDRESS in text
            and 1 < len(text) < 100
        ):
            print_log(text)
            user.email = text
            user.nickname = text.split("@")[0]
            code = random.randint(100000, 999999)

            print_log("code: " + str(code))
            # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            print_log(send_email(str(code), user.email))
            # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            await simpleMessage(
                app,
                message.from_user.id,
                str("–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–æ—á—Ç—É " + text + ". –ï—Å–ª–∏ –ø–∏—Å—å–º–æ –Ω–µ –ø—Ä–∏—à–ª–æ, –ø—Ä–æ–≤–µ—Ä—å –ø–∞–ø–∫—É '–°–ø–∞–º', –∞ —Ç–∞–∫–∂–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª. –ø–æ—á—Ç—ã"),
            )
            await setUserState(message.from_user.id, "email", user.email)
            await setUserState(message.from_user.id, "nickname", user.nickname)
            await setUserState(message.from_user.id, "code", code)
            await setUserState(message.from_user.id, "state", 1)
        else:
            await simpleMessage(
                app,
                message.from_user.id,
                "–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞–ø–∏—à–∏ —Å–≤–æ—é —à–∫–æ–ª—å–Ω—É—é –ø–æ—á—Ç—É (–ø—Ä–∏–º–µ—Ä: ftonita@student.21-school.ru)"
            )
    elif state == 1:
        print("TMP: ", int(await getUserState(message.from_user.id, "code")))
        tmp = str(await getUserState(message.from_user.id, "code"))
        if tmp in text and text != "None":
            await setUserState(message.from_user.id, "state", 2)
            await simpleMessage(app, message.from_user.id, "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
            await simpleMessage(
                app, message.from_user.id, "–í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è (–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –§–ò–û)"
            )
        else:
            await setUserState(message.from_user.id, "state", 0)
            await simpleMessage(
                app,
                message.from_user.id,
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è! –í–≤–µ–¥–∏ –ø–æ—á—Ç—É –µ—â–µ —Ä–∞–∑!",
            )
    elif state == 2:
        if 1 < len(text) < 100 and text != "None":
            user.full_name = text
            if await setUserState(message.from_user.id, "full_name", user.full_name) == 2:
                await simpleMessage(app, message.from_user.id, "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ —Å–≤–æ—ë –∏–º—è!")
                return 
            await setUserState(message.from_user.id, "state", 3)
            await simpleMessage(
                app, message.from_user.id, "–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –∫–∞–º–ø—É—Å–∞(–Ω–∞–ø–∏—à–∏: msc/kzn/nsk)?"
            )
        else:
            await simpleMessage(app, message.from_user.id, "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ —Å–≤–æ—ë –∏–º—è!")
    elif state == 3:
        if len(text) > 1 and text != "None":
            if "ms—Å" in text.lower():
                user.campus = 1
            elif "kzn" in text.lower():
                user.campus = 2
            elif "nsk" in text.lower():
                user.campus = 3
            else:
                await simpleMessage(
                    app,
                    message.from_user.id,
                    "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –∫–∞–º–ø—É—Å–∞!\n–û–±—Ä–∞–∑–µ—Ü: msc/kzn/nsk",
                )
                return
            await setUserState(message.from_user.id, "campus", user.campus)
            await setUserState(message.from_user.id, 'state', 4)
            await app.send_message(
                message.chat.id, "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!", reply_markup=markup
            )
        else:
            await simpleMessage(
                app,
                message.from_user.id,
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –∫–∞–º–ø—É—Å–∞!\n–û–±—Ä–∞–∑–µ—Ü: msc/kzn/nsk",
            )
    if 10 > state >= 4:
        #TEXT
        if text == MAIN_MENU_BTN:
            if (state > 4):
                deletePass(message.from_user.id)
            if role == 1:
                await setUserState(message.from_user.id, "state", 4)
                await app.send_message(message.chat.id, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup)
            elif role == 2:
                await setUserState(message.from_user.id, "state", 10)
                await app.send_message(message.chat.id, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=adm_markup)
        #USER STATE
        elif state == 4:
            if text == CREATE_PASS_BUTTON:
                await simpleMessage(app, message.from_user.id, RULE_34)
                await setUserState(message.from_user.id, "state", 5)
                await app.send_message(
                    message.from_user.id, NAME_MSG, reply_markup=main_menu_markup
                )
            elif text == VIEW_MY_PASS_BUTTON:
                await simpleMessage(app, message.from_user.id, "üìå –°–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –ø—Ä–æ–ø—É—Å–∫–æ–≤ üìå")
                await getMyPasses(message.from_user.id)
            else:
                await app.send_message(
                    message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup
                )
        elif state == 5:
            if 1 < len(text) < 100 and text != "None":
                pass_ = Pass()
                pass_.guest_name = text
                pass_.inviter_id = message.from_user.id
                pass_.campus = int(await getUserState(message.from_user.id, "campus"))
                if database_add_pass(pass_) == 2:
                    await simpleMessage(app, message.from_user.id, "‚ùå –í–≤–µ–¥–∏ –§–ò–û –≥–æ—Å—Ç—è!")
                    return
                await setUserState(message.from_user.id, "state", 6)
                await simpleMessage(app, message.from_user.id, DOCS_MSG)
            else:
                await simpleMessage(app, message.from_user.id, "‚ùå –í–≤–µ–¥–∏ –§–ò–û –≥–æ—Å—Ç—è!")
        elif state == 6:
            if 1 < len(text) < 100 and text != "None":
                if setPassRow(message.from_user.id, "doc_number", text) == 2:
                    await simpleMessage(
                    app,
                    message.from_user.id,
                    "–í–≤–µ–¥–∏ –Ω–∞—Å—Ç–æ—è—â–∏–π –Ω–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞!\n–ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏, –∫–µ–º —Ç–µ–±–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è —ç—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫ ("
                    "–±—Ä–∞—Ç, —Å–µ—Å—Ç—Ä–∞, –¥—Ä—É–≥ –∏ —Ç.–¥)",
                )
                    return
                await setUserState(message.from_user.id, "state", 7)
                await app.send_message(
                    message.from_user.id,
                    DATE_MSG,
                    reply_markup=telegramcalendar.create_calendar(),
                )
            else:
                await simpleMessage(
                    app,
                    message.from_user.id,
                    "–í–≤–µ–¥–∏ –Ω–∞—Å—Ç–æ—è—â–∏–π –Ω–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞!\n–ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏, –∫–µ–º —Ç–µ–±–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è —ç—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫ ("
                    "–±—Ä–∞—Ç, —Å–µ—Å—Ç—Ä–∞, –¥—Ä—É–≥ –∏ —Ç.–¥)",
                )
        elif state == 7:
            await app.send_message(
                message.from_user.id,
                "‚ùå –í—ã–±–µ—Ä–∏ –¥–∞—Ç—É –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –≤—ã—à–µ!",
            )
        elif state == 8:
            if len(text) > 0:
                try:
                    hour = int(text)
                    if 10 <= hour <= 19 and text != "None":
                        setPassRow(message.from_user.id, "hour", hour)
                        setPassRow(message.from_user.id, "state", 1)
                        if role == 1:
                            await setUserState(message.from_user.id, "state", 4)
                            await app.send_message(message.from_user.id, BYE_MSG, reply_markup=markup)
                        elif role == 2:
                            await setUserState(message.from_user.id, "state", 10)
                            await app.send_message(message.from_user.id, BYE_MSG, reply_markup=adm_markup)
                    else:
                        await simpleMessage(
                            app,
                            message.from_user.id,
                            "–ù–∞–ø–∏—à–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è: —Å 10 –¥–æ 19 —á–∞—Å–æ–≤!",
                        )
                except Exception as _ex:
                    await simpleMessage(
                        app,
                        message.from_user.id,
                        "–ù–∞–ø–∏—à–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è: —Å 10 –¥–æ 19 —á–∞—Å–æ–≤!",
                    )
    #ADM STATE
    elif state >= 10:
        if text == MAIN_MENU_BTN:
            deletePass(message.from_user.id)
            await setUserState(message.from_user.id, "state", 10)
            await app.send_message(message.chat.id, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=adm_markup)
        elif state == 10:
            if text == CREATE_PASS_BUTTON:
                await setUserState(message.from_user.id, "state", 5)
                await app.send_message(
                    message.from_user.id, NAME_MSG, reply_markup=main_menu_markup
                )
            elif text == VIEW_MY_PASS_BUTTON:
                await simpleMessage(app, message.from_user.id, "üìå –°–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –ø—Ä–æ–ø—É—Å–∫–æ–≤ üìå")
                await getMyPasses(message.from_user.id)
            elif text == ADM_MM:
                await app.send_message(message.from_user.id, "‚≠êÔ∏è –ü–∞–Ω–µ–ª—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=adm_panel_markup)
                await setUserState(message.from_user.id, 'state', 11)
            else:
                await app.send_message(message.chat.id, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=adm_markup)
        elif state == 11:
            if text == LAST_PASSES_LIST:
                await simpleMessage(app, message.from_user.id, "üìí –°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 25 –ø—Ä–æ–ø—É—Å–∫–æ–≤:")
                await getPassesList(message.from_user.id, 25)
            elif text == CHECK_NEW_PASS:
                new_pass = await admGetPass()
                await app.send_message(message.from_user.id, new_pass, reply_markup=adm_choice_markup)
            elif text == CHECK_PASS:
                await simpleMessage(app, message.from_user.id, "–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –ø—Ä–æ–ø—É—Å–∫–∞: ")
                await setUserState(message.from_user.id, 'state', 12)
            else:
                await app.send_message(message.from_user.id, ADM_MM, reply_markup=adm_panel_markup)
        elif state == 13:
            try:
                temp = getPassByID(int(text))
                await simpleMessage(app, message.from_user.id, temp)
                await setUserState(message.from_user.id, 'state', 10)
            except:
                print_log("ERROR")
                await simpleMessage(app, message.from_user.id, "–í–≤–µ–¥–∏ –≤–∞–ª–∏–¥–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–æ–ø—É—Å–∫–∞")

        

            
    @app.on_callback_query()
    async def CallBackQueryHandler(client, callback_query):
        try:
            state = int(await getUserState(callback_query.from_user.id, "state"))
            if state == 7:
                selected, date = await telegramcalendar.process_calendar_selection(
                    app, callback_query
                )
                tmp = datetime.datetime.now().date().isoformat()

                if selected:
                    if tmp < str(date.strftime("%Y-%m-%d")):
                        await app.send_message(
                            chat_id=callback_query.from_user.id,
                            text="–¢—ã –≤—ã–±—Ä–∞–ª –¥–∞—Ç—É –ø–æ—Å–µ—â–µ–Ω–∏—è –≥–æ—Å—Ç—è: %s"
                            % (date.strftime("%Y-%m-%d")),
                            reply_markup=types.ReplyKeyboardRemove(),
                        )
                        setPassRow(
                            callback_query.from_user.id, "date", date.strftime(
                                "%Y-%m-%d")
                        )
                        await app.send_message(
                            callback_query.from_user.id,
                            TIME_MSG,
                            reply_markup=main_menu_markup,
                        )
                        await setUserState(callback_query.from_user.id, "state", 8)
                    else:
                        await app.edit_message_text(
                            callback_query.message.chat.id,
                            callback_query.message.id,
                            "–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º!",
                            reply_markup=types.ReplyKeyboardRemove(),
                        )
                        await app.send_message(
                            callback_query.from_user.id,
                            "–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–∞—Ç—É:",
                            reply_markup=telegramcalendar.create_calendar(),
                        )
            elif state >= 10:
                pass_id = str(callback_query.message.text).split('\n')[0][9:]
                answer = str(callback_query.data)
                if answer == f"['value', '{ACCEPT_BUTTON}', '+']":
                    if await admStatePass(pass_id, 1) == 2:
                        raise "admStatePass() error"
                    else:
                        await app.send_message(callback_query.from_user.id, await getPassByID(pass_id))
                        await app.delete_messages(callback_query.from_user.id, callback_query.message.id)
                elif answer == answer == f"['value', '{DECLINE_BUTTON}', '+']":
                    if await admStatePass(pass_id, 2) == 2:
                        raise "admStatePass() error"
                    else:
                        await app.send_message(callback_query.from_user.id, await getPassByID(pass_id))
                        await app.delete_messages(callback_query.from_user.id, callback_query.message.id)
        except Exception as _ex:
            print_log(f"[Error: old msg ?] {_ex}")


def main():
    os.system("rm -rf 21passbot.*")
    app.run()
    print_log("End!")
